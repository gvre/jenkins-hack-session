== Credentials

=== Credentials stored in Jenkins can be used:

- anywhere applicable throughout Jenkins (i.e. global credentials)
- by a specific Pipeline project/item (read more about this in the Handling credentials section of Using a Jenkinsfile),
- by a specific Jenkins user (as is the case for Pipeline projects created in Blue Ocean).

=== Jenkins can store the following types of credentials:

- `Secret text` a token such as an API token (e.g. a GitHub personal access token)
- `Username and password` which could be handled as separate components or as a colon separated string in the format username:password (read more about this in Handling credentials)
- `Secret file` which is essentially secret content in a file
- `SSH Username with private key` an SSH public/private key pair
- `Certificate` a PKCS#12 certificate file and optional password
- `Docker Host Certificate Authentication` credentials

=== Examples
**Username / password**

[source,groovy]
----
withCredentials([usernamePassword(credentialsId: 'amazon', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
  // available as an env variable, but will be masked if you try to print it out any which way
  // note: single quotes prevent Groovy interpolation; expansion is by Bourne Shell, which is what you want
  sh 'echo $PASSWORD'
  
  // also available as a Groovy variable
  echo USERNAME
  
  // or inside double quotes for string interpolation
  echo "username is $USERNAME"
}
----

**Password**
[source,groovy]
----
withCredentials([string(credentialsId: "my_password", variable: 'MY_PASSWORD')]) {

}
----

**SSH Key**

[source,groovy]
----
withCredentials([sshUserPrivateKey(credentialsId: 'github_ssh', keyFileVariable: 'SSH_KEY_FILE', passphraseVariable: 'SSH_KEY_PASS')]) {

}
----

**Using the credentials helper method**

[source,groovy]
----
environment {
    AWS_ACCESS_KEY_ID     = credentials('jenkins_aws_secret_key_id')
    AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
}
----

=== Credentials Security

To maximize security, credentials configured in Jenkins are stored in an encrypted form on the master Jenkins instance and are only handled in Pipeline projects via their credential IDs. This minimizes the chances of exposing the actual credentials themselves to Jenkins users.

Jenkins uses the `secrets/master.key` to encrypt the key `secrets/hudson.util.Secret`. This key is then used to encrypt the password in `credentials.xml`.

==== How to decrypt credentials
**Note**: The script console needs admin privileges on Jenkins.

[source,groovy]
----
https://JENKINS/script
----

[source,groovy]
----
import hudson.util.Secret;

println Secret.decrypt("ENCRYPTED_SECRET");
----
